* Viope C course

** Files

Modes:

 Mode 	Meaning 	                                If the file does not exist 	If the file exists
 r 	The file is opened for reading. 	        fopen() returns the value NULL.
 w 	The file is opened for writing. 	        The file is created. 	        The data in the file is destroyed.
 a 	The file is opened for appending. 	        The file is created. 	        New data is appended to the end of the file.
 r+ 	The file is opened for reading and writing. 	The file is created. 	        New data overwrites the old data, starting at the beginning of the file.
 w+ 	The file is opened for reading and writing. 	The file is created. 	        New data overwrites the old data.
 a+ 	The file is opened for reading and appending. 	The file is created. 	        New data is appended to the end of the file.

Opening for writing:

   1:    #include <stdio.h>
   2:    int main()
   3:    {
   4:      FILE *opening;
   5:      opening = fopen("filename.txt", "w");
   6:
   7:      if(opening == NULL){
   8:        printf("An error occurred when opening the file!");
   9:        return 0;
   10:     }
   11:     else {
   12:       fprintf(opening, "Joe");
   13:       fclose(opening);
   14:     }
   15:    return 0;
   16:   }

Opening for reading:

   1:    #include<stdio.h>
   2:
   3:    int main()
   4:    {
   5:      FILE *file_handle;
   6:      float number_read;
   7:
   8:      if((file_handle = fopen("data.txt", "r")) == NULL) {
   9:        printf("File not found!"); return 0;
   10:     } else {
   11:       fscanf(file_handle, "%f", &number_read);
   12:       fclose(file_handle);
   13:
   14:       printf("The number %f was found in the file", number_read);
   15:     }
   16:     return 0;
   17:    }

Reading multiple data:

   1:    #include <stdio.h>
   2:
   3:    int main()
   4:    {
   5:      FILE *file_handle;
   6:      float number1, number2, number3, number4;
   7:
   8:      if((file_handle = fopen("data.txt", "r")) == NULL) {
   9:        printf("File not found!"); return 0;
   10:     } else {
   11:       fscanf(file_handle, "%f %f %f %f ", &number1, &number2, &number3, &number4);
   12:       fclose(file_handle);
   13:
   14:       printf("The numbers %f, %f, %f and %f were found in the file", number1, number2, number3, number4);
   15:     }
   16:     return 0;
   17:    }

The spaces could be replaced by any whitespace character. Thus our file could also look like this:

 fscanf(file_handle, "%f, %f, %f, %f ", &number1, &number2, &number3, &number4);

Matrix:

   4,  5,   6, 3
   23, 4,   1, 32
   2, 98,   3, 4
   6, 11,  57, 10
   3, 54,  22, 5

Read matrix from a file:

   1:    #include <stdio.h>
   2:    int main()
   3:    {
   4:      int matrix[5][4];
   5:      int squares[5][4];
   6:
   7:      int x, y;
   8:
   9:      FILE *read_file;
   10:     FILE *write_file;
   11:
   12:     if((read_file = fopen("matrix.txt", "r")) == NULL) {
   13:       printf("Failed to open file (matrix.txt).");
   14:       return 0;
   15:     }
   16:     else {
   17:       for(y = 0; y < 5; y++) {
   18:         for(x = 0; x < 4; x++) {
   19:           if(x == 3) {
   20:             fscanf(read_file, "%d", &matrix[y][x]);
   21:           }
   22:           else {
   23:             fscanf(read_file, "%d,", &matrix[y][x]);
   24:           }
   25:         }
   26:       }
   27:     }
   28:
   29:    fclose(read_file);
   30:
   31:    for(y = 0; y < 5; y++) {
   32:      for(x = 0; x < 4; x++) {
   33:        squares[y][x] = 0; squares[y][x] = matrix[y][x] * matrix[y][x];
   34:      }
   35:    }
   36:
   37:    if((write_file = fopen("squares.txt", "w")) == NULL) {
   38:      printf("Failed to open file (squares.txt).");
   39:    }
   40:    else {
   41:      for(y = 0; y < 5; y++) {
   42:        for(x = 0; x < 4; x++) {
   43:          if(x == 3) {
   44:            fprintf(write_file, "%d\n", squares[y][x]);
   45:          }
   46:          else {
   47:            fprintf(write_file, "%d, ", squares[y][x]);
   48:          }
   49:        }
   50:      }
   51:    }
   52:
   53:   fclose(write_file);
   54:   return 0;
   55: }

** Chapter characters

Print characters in decimal and character format:

   4:    char character_variable;
   5:    character_variable = 'v';
   6:
   7:    printf("The character corresponding to the number %d is %c", character_variable, character_variable);

Array declarations:

   char character_array[5] = { 'a', 'u', 't', 'o', '\0' };
   char character_array[5] = "auto";
   char character_array[] = "auto";
   char string_of_chars[] = "This is a string for printing!";

   printf("The array contains the following string: %s", string_of_chars);

Read strings from keyboard:

   char input_string[30];
   printf("Enter a string (max 29 characters, no blanks):");

   /*Read the first character of the string to the first element in the array. (input_string[0])*/
   scanf("%s", &input_string[0]);

   printf("You entered the string: %s", input_string);

Scanf to read multiple strings:

   char firstname[10], lastname[20];

   printf("Enter a first and last name separated by spaces:");
   scanf("%s%s", &firstname[0], &lastname[0]);

   printf("Added to the register: %s %s.", &firstname, &lastname);

Scanf to read multiple strings and print out:

   char firstname[10], lastname[20], phonenumber[15];

   printf("Enter a first and last name separated by spaces:");
   scanf("%s%s", &firstname[0], &lastname[0]);

   printf("Enter the phone number of %s: ", firstname);
   scanf("%s", &phonenumber[0]);

   printf("The person you entered was %s %s, phone: %s", firstname, lastname, phonenumber);

** Datastructures

Definition and declaration:

   struct personaldata
   {
     char firstname[15];
     char lastname[25];
     int age;
     int weight;
   };

   struct personaldata person_1;
   struct personaldata person_1, person_2, person_3;

Definition and declaration:

   struct personaldata
   {
     char firstname[15];
     char lastname[25];
     int age;
     int weight;
   } person_1;

Save info in a datastructure:

   person_1.firstname = "John";
   person_1.lastname = "Doe";
   person_1.age = "22";
   person_1.weight = "70";

Print data from a datastructure:

    printf("Person 1: %s %s, age: %d, weight: %d",
                      person_1.firstname, person_1.lastname, person_1.age, person_1.weight);

Assign data from one datastructure to another:

   person_2.firstname = person_1.firstname;
   person_2.lastname = person_1.lastname;
   person_2.age = person_1.age;
   person_2.weight = person_1.weight;

   OR

   person_2 = person_1;

   1:    #include <stdio.h>
   2:    int main()
   3:    {
   4:      int i;
   5:      FILE *write_file;
   6:      char register[] = "register.txt";
   7:
   8:      struct person {
   9:        char firstname[15];
   10:       char lastname[25];
   11:       int age;
   12:       int weight;
   13:     };
   14:
   15:     struct person person_list[5];
   16:
   17:     for(i=0; i<5; i++) {
   18:       printf("Enter a first name, last name, age and weight separated by spaces:");
   19:       scanf("%s%s%d%d", &person_list[i].firstname[0], &person_list[i].lastname[0],
   20:                         &person_list[i].age[0], &person_list[i].weight[0]);
   21:     }
   22:
   23:     if ((write_file = fopen(register, "w")) == NULL) {
   24:       printf("Error opening file.");
   25:       return 0;
   26:     } else {
   27:       for(i=0; i<5; i++) {
   28:         fprintf(write_file, "%s %s %d %d", person_list[i].firstname,
   29:           person_list[i].lastname, person_list[i].age, person_list[i].weight);
   30:       }
   31:     }
   32:     fclose(write_file);
   33:     printf("Successfully saved the data!");
   34:     return 0;
   35:   }

** Pointers

RAM consists of memory locations, each of which can store one byte of data. When a variable is declared in a program, memory locations are allocated for it in the computer's memory. The number of memory locations allocated depends on the data type of the variable - for example, when declaring a float type variable, the computer will typically allocate four consecutive memory locations for storing the value of the variable.

Every variable has its own, unique address in memory, and the computer uses this very address to find the value of a variable stored in memory. The address of a variable is always the address of the memory location where the space allocated for the variable starts.

At this point, if you remember that a pointer is a special variable for holding the address of the variable that it points to.

 datatype *pointer_name;

 int mass;      /* declare the variable mass */
 int *p_mass;   /* declare a pointer to the variable mass */

 int mass, *o_mass, weight, *o_weight;

Before a pointer can be used anywhere, it must be initialised to point to the desired variable. You should keep this in mind, because the use of an uninitialised pointer (that is, a pointer that does not point to the memory location of any specific variable) in your program can easily lead to a situation where the program destroys the contents of a memory location reserved by the operating system.

 pointer = &variable;
 scanf("%d", &variable_name);

 float mass;
 float *p_mass;
 p_mass = &mass;

 float *p_massa = &massa;

 1:   #include <stdio.h>
 2:   int main()
 3:   {
 4:     float weight = 73.00;
 5:     float *p_weight;
 6:     p_weight = &weight;
 7:
 8:     /*Print the value and address using the variable*/
 9:     printf("weight = %.2f\n", weight);
 10:    printf("&weight = %d\n\n", &weight);
 11:
 12:    /*Do the same using a pointer referring to the variable*/
 13:    printf("*p_weight = %.2f\n", *p_weight);
 14:    printf("p_weight = %d", p_weight);
 15:
 16:    return 0;
 17:  }

- A pointer is declared as follows: data type *pointer_name;
- A pointer is initialised as follows: pointer_name = &variable;
- When you want to refer to the value contained in a variable, you can use either the variable as such or a pointer referring to it: *pointer_name
- When you want to refer to the address of a variable, you can use either the variable or a pointer referring to it: &variable or pointer_name

** Arrays and pointers

 printf("The address of the first array element is: %d", coefficients);

 coefficients == &coefficients[0];

When establishing a pointer variable for an array, there are two ways of initialising the pointer to refer to the array:

 float coefficients[4], *p_coefficients;
 p_coefficients = coefficients; /* initialisation using the array name */
 p_coefficients = &coefficients[0]; /* initialisation using a reference to the desired element */

 #include <stdio.h>
 int main()
 {
   int x = 0;
   int integers[3];
   float floatingnumbers[3];

   printf("Addresses of the array elements:\n\n");

   for(x=0; x<3; x++)
   {
     printf("Address of the %d. element of the integer array:\n", x+1);
     printf("%d\n" &integers[x]);

     printf("Address of the %d. element of the floating point array:\n", x+1);
     printf("%d\n" &floatingnumbers[x]);
   }
   return 0;
 }

Size of data and in hence for incremental bits of pointers to this types:

 int -> +2
 float -> +4

 char *greetingtext = "Hello world!";

Passing an array to a function using a pointer:

 #include<stdio.h>

 void printer(int *numbers, int x);

 int main()
 {
   int qty = 4;
   int integers[] = {1, 4, 22, 91};
   printer(integers, qty);
   return 0;
 }

 void printer(int *numbers, int x)
 {
   int i;
   for(i=0; i<x; i++)
   {
     printf("%d\n", numbers[i]);
   }
 }

 Files and pointers:
 1:  #include <stdio.h>
 2:  int main()
 3:  {
 4:     FILE *opening = fopen("filename.txt", "w");
 5:     fprintf(opening, "Joe");
 6:
 7:     fclose(opening);
 8:     return 0;
 9:  }

- FILE is a data structure contained in the standard library stdio; its members are used for various file processing events.

Increment and decrement:

 int array[3];
 int *p_array = array; /* the pointer now points to the first element of the array */
 p_array++; /* now the pointer points to the second element */
 p_array--; /* and again to the first one */

 OR

 int array[3];
 int *p_array = array; /* the pointer now points to the first element of the array */
 p_array += 2; /* now the pointer points to the second element */
 p_array -=2; /* and again to the first one */

Distance between array elements:

 #include
 int main()
 {
   int numbers[] = {2, 4, 5, 6};
   int *p_numbers_1, *p_numbers_2;
   int distance;

   p_numbers_1 = &numbers[0];
   p_numbers_2 = &numbers[2];

   distance = p_numbers_2 - p_numbers_1;
   printf("%d", distance);
   return 0;
 }

Comparisson operators:

 int numbers[] = {4, 3, 2, 1};
 int *p_numbers_1, *p_numbers_2;
 int isthistrue = 0;

 p_numbers_1 = &numbers[3];
 p_numbers_2 = &numbers[0];
 isthistrue = p_numbers_1 > p_numbers_2;

Because the variable "isthistrue" receives a true value in the comparison "p_numbers_1 > p_numbers_2", the pointer "p_numbers_1" points to an element located after the other within the array.

For the sake of revision, we shall note that the C language uses the following operators: ==, !=, <, >, <=, >=.

* Exercises

** Introduction to C programming

*** Your first touch with programming in C.

Assignment

    The purpose of this exercise is to introduce you to authoring programs in the C language. The following is a program in C. Your task is to rewrite the program. In the next chapter, you will learn how the program works and what it does.

    #include <stdio.h>
    /* This is a fine program */

    int main(void){
      int number;
      printf("Enter a number:");
      scanf("%d", &number);
      printf("The number was: %d\n",number);
      return 0;
    }

Your answer

 #include <stdio.h>
 /* This is a fine program */

 int main(void){
   int number;
   printf("Enter a number:");
   scanf("%d", &number);
   printf("The number was: %d\n",number);
   return 0;
 }

** From travelling algorithms to the world of computing

*** Printing on the screen

Assignment

    Write a functioning program in C that, upon execution, prints the following on the screen: "Hello everybody!", followed by a newline character \n after the exclamation point. After printing, the program closes itself.

    Hint:
    Everything required for creating the program can be found in the example program in Chapter 2. Once you have understood the operating principle of the example, it should be easy to write your program. You do not need any boxes or variables in this program.

Your answer

 #include <stdio.h>

 int main()
 {
     printf("Hello everybody!\n");

     return 0;
 }

*** Reading from the keyboard and printing

Assignment

    Write a program that prompts the user for an integer, calculates the square and prints the result on the screen (also print out a newline character \n after the result). After printing, the program closes itself.

    Hint:
    The program can be written in quite much the same way as the example in the chapter. You can implement the program in many ways, but you will probably need two variables: one for the number entered by the user and one for the square. In the example, the addition operator + was used for calculating a sum. In this program, you need the multiplication operator *.

Your answer

 #include <stdio.h>

 int main()
 {
     int number;
     int square;

     printf("Enter an integer: ");
     scanf("%d", &number);

     square = number * number;

     printf("The square of the number you entered is %d\n", square);

     return 0;
 }

** Variables in the C language

*** Numbers and processing them

Assignment

    Write a program that first asks the user for an integer and after that, a floating-point number. Finally, the program prints both numbers on the screen. The floating-point number shall be printed with two decimal places of precision.

Your answer

 #include <stdio.h>

 int main()
 {
     int num_integer;
     float num_float;

     printf("Enter an integer:");
     scanf("%d", &num_integer);
     printf("Enter a decimal number:");
     scanf("%f", &num_float);

     printf("You entered the integer: %d\n", num_integer);
     printf("You entered the decimal number, rounded to two decimal places: %.2f\n", num_float);

     return 0;
 }

*** Processing and printing values received as input

Assignment

     Write a program that prompts the user for an amount in Finnish markka and converts it to euro. Finally, the program prints the amount on the screen in euro with two decimal places of precision. The euro conversion factor is 5.94573.

     Hint:
     You need three variables: one for the conversion factor, one for markka and one for euro. The required division can be accomplished by using the "/" character.

Your answer

 #include <stdio.h>

 int main()
 {
     float fim_amount;
     float euro_amount;

     printf("Enter an amount in FIM: ");
     scanf("%f", &fim_amount);

     euro_amount = fim_amount / 5.94573;

     printf("FIM converted to euro: %.2f\n", euro_amount);

     return 0;
 }

** Program statements, expressions and operators

*** Calculations

Assignment

    Write a program that prompts the user for two integers and prints the sum, difference and product of the numbers on the screen.

    Hint:
    This exercise is an excellent opportunity for practicing how to print several variables in one printf() statement. The variables in the program are integer variables.

Your answer

 #include <stdio.h>

 int main()
 {
     int first_number;
     int second_number;

     printf("Enter the first number:");
     scanf("%d", &first_number);

     printf("Enter the second number:");
     scanf("%d", &second_number);

     printf("%d+%d=%d\n", first_number, second_number, first_number + second_number);
     printf("%d-%d=%d\n", first_number, second_number, first_number - second_number);
     printf("%d*%d=%d\n", first_number, second_number, first_number * second_number);

     return 0;
 }

*** Checking if a number is even

Assignment

    Write a program that prompts the user for an integer and checks whether it is even or odd. If the number is even, print the value 0, and if it is odd, print the value 1.

    Hint:
    A number is even if the remainder from division by two is zero.

Your answer

 #include <stdio.h>

 int main()
 {
     int number;

     printf("Enter an integer: ");
     scanf("%d", &number);

     if(number % 2 == 0)
         printf("The number is 0\n");
     else
         printf("The number is 1\n");

     return 0;
 }

** If statements add power to your programs

*** Checking if a number is even

Assignment

    Write a program that prompts the user for an integer and checks whether it is even or odd. If the number is even, print "Number 2 is even.", if it is odd, print "Number 1 is odd.".

    Hint:
    The program is almost the same as in the previous chapter. The new part is: If the remainder is zero, print "even". If the remainder is one, print "odd". Otherwise print an error message.

Your answer

 #include <stdio.h>

 int main()
 {
     int number;

     printf("Enter an integer: ");
     scanf("%d", &number);

     if(number % 2 == 0)
         printf("Number %d is even.\n", number);
     else
         printf("Number %d is odd.\n", number);

     return 0;
 }

*** Comparison operators

Assignment

    Write a program that first asks the user for his/her gender and then for his/her age. Finally, the program prints a statement in accordance with the following instructions: Male 0 to 55 years: "You are a man in your best years!", Male 56-100 years: "You are a wise man!", Female 0-55 years: "You are a beauty!", Female 56-100 years: "You look young for your age!", Otherwise "An error occurred in the program!" The age shall be processed as an integer variable and the gender as a character variable (m/f). You do not need to account for upper case letters.

    Hint:
    Spend enough time on program design before you start typing your program. You can get help for the exercise in the learning material for Chapter 4.

Your answer

 #include <stdio.h>

 int main()
 {
     char gender;
     int age;

     printf("Are you male or female (m/f)?");
     scanf("%c", &gender);

     printf("Enter your age:");
     scanf("%d", &age);

     if(gender == 'm')
         if(age >= 0 && age <= 55)
             printf("You are a man in your best years!\n");
         else if(age >= 56 && age <= 100)
             printf("You are a wise man!\n");
         else
             printf("An error occurred in the program!\n");
     else if(gender == 'f')
         if(age >= 0 && age <= 55)
             printf("You are a beauty!\n");
         else if(age >= 56 && age <= 100)
             printf("You look young for your age!\n");
         else
             printf("An error occurred in the program!\n");
     else
         printf("An error occurred in the program!\n");

     return 0;
 }

*** Calculations

Assignment

    Write a simple calculator program that calculates the difference, sum or product of two numbers. First, the program asks which calculation to perform. After this, the program prompts for the numbers, performs the calculation and prints the result. The selection within the program has to be done using a switch() statement.

Your answer

 #include <stdio.h>

 int main()
 {
     char option;
     int first_number;
     int second_number;

     printf("1: subtraction\n");
     printf("2: addition\n");
     printf("3: multiplication\n");
     printf("Select function:");
     scanf("%c", &option);

     printf("Enter the first number:");
     scanf("%d", &first_number);

     printf("Enter the second number:");
     scanf("%d", &second_number);

     switch(option){
         case '1': printf("%d-%d=%d\n", first_number, second_number, first_number-second_number); break;
         case '2': printf("%d+%d=%d\n", first_number, second_number, first_number+second_number); break;
         case '3': printf("%d*%d=%d\n", first_number, second_number, first_number*second_number); break;
         default: break;
     }

     return 0;
 }

** Loop structures in the C language: the lazy programmer's dream

*** For statement

Assignment

    Write a program that prompts the user for an integer n (n>0) and prints the numbers 1,2,3...n on the screen one below the other. Write the program using the FOR statement.

Your answer

 #include <stdio.h>

 int main()
 {
     int number;
     int i;

     printf("Enter an integer: ");
     scanf("%d", &number);

     for(i = 1; i <= number; i++)
         printf("%d\n", i);

     return 0;
 }

*** Factorial

Assignment

    Write a program that prompts the user for an integer n (n>0) and prints the factorial of the number on the screen. For example, the factorial of n is designated n!, which means the number calculated as follows: 1*2*3...*n

Your answer

 #include <stdio.h>

 int main()
 {
     int i;
     int number;
     int factorial = 1;

     printf("Enter an integer: ");
     scanf("%d", &number);

     for(i = 1; i <= number; i++)
         factorial = factorial * i;

     printf("The factorial of %d is %d\n", number, factorial);

     return 0;
 }

*** Calculating an average, loop structure

Assignment

    Write a program that asks for the students' exam scores (using integers 4 to 10) and calculates the average. The program must accept scores until entry is terminated by a negative integer. Finally, the program prints out the number of scores and the calculated average with two decimal places of precision.

    Hint:
    You can write your program using either the while or do...while statement.

Your answer

 #include <stdio.h>

 int main()
 {
     int new_score;
     float acumulator = 0.0;
     int counter = 0;

     printf("The program calculates the average of scores you enter.\n");
     printf("End with a negative integer.\n");

     do {
         printf("Enter score (4-10):");
         scanf("%d", &new_score);

         if (new_score >= 4 && new_score <= 10) {
             acumulator += new_score;
             counter++;
         }

     } while(new_score > 0);

     printf("You entered %d scores.\n", counter);
     printf("Average score: %.2f\n", (double)acumulator / counter);

     return 0;
 }

** Functions - a route to more extensive programs

*** Handling functions

Assignment

    Your task is to supplement the source code below with the missing functions. The program prints the following text in accordance with the user's selections:

    Choice 1: "The cat says meow!"
    Choice 2: "The dog says wuff-wuff!"
    Choice 3: "The cow says moo!"

    Upon execution, the program asks the user to select one of the animals. Once selected, the program calls a function that prints out the correct utterance. After executing the function, the program returns to ask the user for a new choice. The program is terminated by a negative integer.

    Code to be supplemented:

    #include <stdio.h>

    void cat(void);
    void dog(void);
    void cow(void);

    void main()
    {
      int choice;
      do{

        printf("1:cat\n2:dog\n3:cow\n");
        printf("End with a negative number.\n");
        printf("Select animal:");
        scanf("%d", &choice);
        if(choice < 0) {
          printf("Terminating the program...");
        }
        else if(choice == 1) {
          cat();
        }
        else if(choice == 2) {
          dog();
        }
        else if(choice == 3) {
          cow();
        }
        else {
          printf("You entered an invalid number.\n\n");
        }
      }while(choice>0);
    }

    Hint: The purpose of the exercise is to provide you with a feeling for writing functions. Do not copy the source code, only write functions that print the output. The functions are declared in the prototypes before the main program.

Your answer

 void cat()
 {
     printf("The cat says meow!\n");
 }

 void dog()
 {
     printf("The dog says wuff-wuff!\n");
 }

 void cow()
 {
     printf("The cow says moo!\n");
 }

*** Calculations

Assignment

    Write a calculator program that calculates the sum, difference or product of two integers. The program asks for the type of calculation first (1 = sum, 2 = difference, 3 = product). After calculation, the result is printed on the screen and the program returns to prompt for the next calculation.

    You should write a function for each calculation, prompting for the numbers, performing the desired calculation and printing the answer on the screen. The program is terminated by entering a negative number just like in the previous exercise.

    Hint:
    You can use the previous exercise as the body of your program. The functions carrying out the calculations and printing do not take any parameters or return any value.

Your answer

 #include <stdio.h>

 int sum(int,int);
 int difference(int,int);
 int product(int,int);

 int main()
 {
     int option;
     int first_number;
     int second_number;

     do {

         printf("1: sum of two numbers\n");
         printf("2: difference of two numbers\n");
         printf("3: product of two numbers\n");
         printf("<0: terminate the program\n");
         printf("Select calculation:");
         scanf("%d", &option);

         if( option < 0 )
             break;

         printf("Enter the first number:");
         scanf("%d", &first_number);

         printf("Enter the second number:");
         scanf("%d", &second_number);

         switch(option) {
             case 1: printf("%d + %d = %d\n", first_number, second_number, sum(first_number, second_number)); break;
             case 2: printf("%d - %d = %d\n", first_number, second_number, difference(first_number, second_number)); break;
             case 3: printf("%d * %d = %d\n", first_number, second_number, product(first_number, second_number)); break;
         }

     } while(option >= 0);

     printf("Terminating the program...\n");

     return 0;
 }

 int sum(int x, int y)
 {
     return x+y;
 }

 int difference(int x, int y)
 {
     return x-y;
 }

 int product(int x, int y)
 {
     return x*y;
 }

*** Using functions

Assignment

    Write a program that takes three integers as input and prints the smallest and largest of these numbers. The main program must prompt for integers and read them. Write the functions largest() and smallest() that receive the entered numbers as their parameters. Correspondingly, the functions shall return values corresponding to their names.

    Hint:
    You can use combined comparisons and the if-else structure in your program.

Your answer

 #include <stdio.h>

 int largest(int,int,int);
 int smallest(int,int,int);

 int main()
 {
     int i;
     int n[3];

     for(i = 0; i < 3; i++){
         printf("Enter the %i. number:", i+1);
         scanf("%d", &n[i]);
     }

     printf("Among the numbers you entered,");
     printf("the largest was %d and the smallest was %d.\n", largest(n[0],n[1],n[2]), smallest(n[0],n[1],n[2]));

     return 0;
 }

 int largest(int n1, int n2, int n3)
 {
     int max;

     max = n1 >= n2 ? n1 : n2;
     max = n3 > max ? n3 : max;
     return max;
 }

 int smallest(int n1, int n2, int n3)
 {
     int min;

     min = n1 <= n2 ? n1 : n2;
     min = n3 < min ? n3 : min;
     return min;
 }

** Numerical arrays in the C language

*** Working hours calculator

Assignment

    Write a program that calculates the number of hours worked within a specific period and prints the total number of hours, the average length of a day and an itemisation of the hours entered. First, the program must ask how many days of working hours shall be entered (max 30 days). After this, the program asks for the daily working hours. The program output shall have one decimal place of precision.

    Hint:
    It is easiest to implement the program using an array with 30 elements.

Your answer

 #include <stdio.h>

 int main()
 {
     int days;
     float hours;
     float total = 0.0;
     float day[30];
     int i;

     printf("The program calculates the total hours worked during\n");
     printf("a specific period and the average length of a day.\n\n");
     printf("How many days:");
     scanf("%d", &days);

     for(i = 0; i < days; i++) {
         printf("Enter the working hours for day %i:", i+1);
         scanf("%f", &day[i]);
         total += day[i];
     }

     printf("Total hours worked: %.1f\n", total);
     printf("Average length of day: %.1f\n", total / days);
     printf("Hours entered: ");

     for(i = 0; i < days; i++) {
         printf("%.1f ", day[i]);
     }

     printf("\n");

     return 0;
 }

*** Handling matrices

Assignment

    The following is the initialisation of a 5 x 5 integer array:

    int matrix[5][5] =
    {
    4, 6, 25, 88, 5,
    34, 5, 300, 4, 65,
    78, 43, 11, 90, 125,
    98, 585, 12, 63, 21,
    45, 35, 9, 5, 1
    };

    Copy the initialisation into a program that prints the array on the screen and calculates the sum of the elements. Each line shall be followed by a newline character.

    Hint:
    The program can be implemented using nested for statements. You can use an if statement to check whether a newline is required. The numbers on the lines of the matrix must be separated by single spaces.

Your answer

 #include <stdio.h>

 int main()
 {
     int matrix[5][5] =
     {
     4, 6, 25, 88, 5,
     34, 5, 300, 4, 65,
     78, 43, 11, 90, 125,
     98, 585, 12, 63, 21,
     45, 35, 9, 5, 1
     };

     int i;
     int j;
     int accumulator = 0;

     printf("In the array:\n");

     for(i = 0; i < 5; i++) {
         for(j = 0; j < 5; j++){
             printf("%d ", matrix[i][j]);
             accumulator += matrix[i][j];
         }
         printf("\n");
     }

     printf("\nthe sum of the elements is %d\n", accumulator);

     return 0;
 }

** Handling files in the C language

*** Writing into a file

Assignment

    Write a program that prints the text "Hello world!" into the file "hello.usr". The file does not exist, so it must be created. Finally, the program must print a message on the screen indicating that writing to the file was successful. The text printed to the file must exactly match the assignment.

Your answer

 #include <stdio.h>

 int main()
 {
     int ret;
     FILE *opening = fopen("hello.usr", "w");

     if(opening == NULL){
         printf("An error occurred when opening the file!");
         return 0;
     }

     ret = fprintf(opening, "Hello world!");

     if(ret != EOF)
         printf("Writing to the file was successful.\n");

     printf("Closing the program.\n");
     fclose(opening);

     return 0;
 }

*** Reading from a file

Assignment

    The file "numbers.s" contains 4 integers. The numbers are on the first line of the file, separated by spaces. Write a program that reads the integers from the file and calculates their sum. Finally, the program prints the numbers and the sum on the screen.

Your answer

 #include <stdio.h>

 int main()
 {
     int sum;
     FILE *opening = fopen("numbers.s","r");
     int n1, n2, n3, n4;

     if(opening == NULL){
         printf("Error when opening the file\n");
         return 0;
     }

     printf("Numbers found in the file numbers.s:\n");
     fscanf(opening, "%d %d %d %d", &n1, &n2, &n3, &n4);

     printf("%d, %d, %d and %d\n\n", n1, n2, n3, n4);

     printf("Sum of the numbers: %d\n", n1+n2+n3+n4);

     fclose(opening);

     return 0;
 }

*** Handling files

Assignment

    The files "mata.txt" and "matb.txt" contain integer matrices of size 10 x 10. Write a program that calculates the sum of the matrices in a new matrix. The resulting sum matrix shall be saved to the file "sum.usr".

    The matrix elements are separated by spaces and newlines. For example:

    1 2 3 4 5 6 7 8 9 10
    11 12 13 14 15 16 17 18 19 20
    ... ... ...
    ... ... ...
    91 92 93 94 95 96 97 98 99 100
    The sum matrix must be saved in the same format. At the end, the program prints a message indicating successful completion.

Your answer

 #include <stdio.h>

 int main()
 {
     FILE *opening = fopen("mata.txt", "r");
     FILE *opening2 = fopen("matb.txt", "r");
     FILE *opening3 = fopen("sum.usr", "w");

     int matrix[10][10];

     int i, j;

     int val1, val2, valsum;

     for(i = 0; i < 10; i++) {
         for(j = 0; j < 10; j++) {
             fscanf(opening, "%d ", &val1);
             fscanf(opening2, "%d ", &val2);

             valsum = val1 + val2;

             fprintf(opening3, "%d ", valsum);
         }

         fscanf(opening, "\n");
         fscanf(opening2, "\n");

         fprintf(opening3, "\n");
     }

     printf("The sum of the matrices has been calculated into the file sum.usr.\n");

     return 0;
 }

** Handling characters and strings in the C language

*** Files and strings

Assignment

    Write a program that asks for the user's first and last name and saves these into a file named by the user.

    The program must start by asking for the first name. The last name is entered next, followed by the desired file name. The first part of the file name may have a maximum of 8 characters and the second part may have 3 (for example: personal.usr). The file must reside in the same directory as the program.

    The last name can have a maximum of 20 characters, the first name 15.

    Hint:
    In the chapter dealing with file processing, files were opened using a string array. Read the chapter and you should be able to perceive how to implement the program.

Your answer

 #include <stdio.h>

 int main()
 {
     int ret;
     FILE *opening;
     char name[15+1];
     char surname[20+1];
     char filename[8+3+1+1]; /* filename + dot + extension + end of string space */

     printf("The program saves your first and last name into a file.\n");
     printf("Enter your first name:");
     scanf("%s", name);

     printf("Enter your last name:");
     scanf("%s", surname);

     printf("File where you want to save your name:");
     scanf("%s", filename);

     opening = fopen(filename, "w");

     ret = fprintf(opening, "%s %s\n", name, surname);

     if(ret != EOF)
         printf("\nSuccessfully saved the data!\n");

     fclose(opening);

     return 0;
 }

*** Processing strings

Assignment

    Write a program that prompts the user for a word (max 15 lower-case letters) and calculates the number of wovels (a, e, i, o, u, y) in the word. Hint:
    You have learned to compare the value of a character variable to 'a', for example. You can use an index to refer to single characters in a string array. (char[] = "word"; word[1] == 'a';)

Your answer

 #include <stdio.h>
 #include <string.h>

 int main()
 {
     char word[15+1] = {0};
     int wovels = 0;
     int i;

     printf("The program calculates the number of wovels.\n");
     printf("Enter a word:");
     scanf("%s", word);

     for(i = 0; i < strlen(word); i++) {
         if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' )
             wovels++;
     }

     printf("The word contains %i wovels.\n", wovels);

     return 0;
 }

** Simple data structures in the C language

*** Phone directory - adding data

Assignment

    In this chapter, we create independent programs that are closely associated with each other. All the programs are components of a phone directory program. The intention is that you can continue your programming exercises by programming a phone directory. The exercises in this chapter can easily be converted into functions for a larger entity.

    The name and number data for the phone directory are contained in the file "phonedir.txt" which has the following format:

    4
    Firstname Lastname 050-3500980
    John Doe 041-3478924
    Brian Smith 040-3980982
    Brita Smith 05-4567393

    The first line of the file indicates the number of names added to the directory as an integer. The first name, last name and telephone number are processed in text format. The data items are separated by spaces in the file, and the length of an individual item (such as a first name) may be no more than 20 characters. Each line includes the information for one person only. The directory may contain a maximum of 50 people. Your first task is to write a program for adding a new telephone number to the directory. Upon execution, the program must first ask for a first name, after which it prompts for a last name and a telephone number. When data is saved, the value on the first line of the file must increase by one. Note that in order to simplify the exercise, the data to be entered may not include a newline character, for example. Each personal data item is stored on its own line. (Remember the newline character.)

Your answer

 #include <stdio.h>

 struct person{
     char name[20];
     char surname[20];
     char phone[20];
 } a_person[50];

 int main()
 {
     FILE *opening;
     int ret;
     int i = 0;
     int j;
     int z;
     int number;
     struct person nueva_persona;

     opening = fopen("phonedir.txt","r");
     fscanf(opening, "%i", &number);
     number++;
     fclose(opening);

     opening = fopen("phonedir.txt","r+");
     fprintf(opening, "%i", number);
     fclose(opening);

     opening = fopen("phonedir.txt","a+");

     printf("Enter first name:");
     scanf("%s", a_person[0].name);

     printf("Enter last name:");
     scanf("%s", a_person[0].surname);

     printf("Enter telephone number:");
     scanf("%s", a_person[0].phone);

     fprintf(opening, "%s %s %s\n", a_person[0].name,a_person[0].surname, a_person[0].phone);

     printf("Successfully saved the data.\n");

     fclose(opening);

     return 0;
 }

*** Phone directory - printing data

Assignment

    Write a program that prints all the numbers in the phone directory to the screen. The file for reading the numbers is the same as in the previous exercise (phonedir.txt). Upon execution, the program opens the file, reads the data and prints it.

Your answer

 #include <stdio.h>

 struct person{
     char name[20];
     char surname[20];
     char phone[20];
 } ;

 int main()
 {
     FILE *opening;
     int ret;
     int i;
     int j;
     int z;
     int number;
     struct person n;

     opening = fopen("phonedir.txt","r");
     fscanf(opening, "%i\n", &number);

     for(i = 0; i < number; i++) {
         fscanf(opening, "%s %s %s\n", n.name, n.surname, n.phone);
         printf("%s %s %s\n", n.name, n.surname, n.phone);
     }

     fclose(opening);

     return 0;
 }

*** Phone directory - removing a person's data

Assignment

    Write a program for removing a specific person's data from the directory. The program asks for a first name followed by a last name. The program checks if the person's data can be found. If the person is in the directory, the data is removed. Otherwise print an error message.

    Hint:
    You should carefully design the program before writing any actual code. The use of structures may make the task easier. It is most obvious that when you save an updated list, the existing data in the file phonedir.txt is overwritten.

    You can compare name information using the C language function strcmp() in the library file string.h. You can find information about using the function in the C manual.

Your answer

 #include <stdio.h>

 struct person{
     char name[20];
     char surname[20];
     char phone[20];
 } n[50];

 int main()
 {
     int i;
     int number;
     int todelete;
     char name[20];
     char surname[20];
     char phone[20];

     FILE *opening = fopen("phonedir.txt", "r");

     printf("Enter first name:");
     scanf("%s", name);
     printf("Enter last name:");
     scanf("%s", surname);

     fscanf(opening, "%i\n", &number);

     for( i = 0; i < number; i++ ){
         fscanf(opening, "%s %s %s\n", n[i].name, n[i].surname, n[i].phone);
         if(          !strcmp(n[i].name, name)   &&      !strcmp(n[i].surname, surname)  ) {
             todelete = i;
         }
     }

     fclose(opening);

     opening = fopen("phonedir.txt", "w");
     fprintf(opening, "%i\n", --number);

     number++;

     for( i = 0; i < number; i++ ){

         if ( i == todelete ){
             printf("Data removed from the directory.\n");
         } // does nothing
         else {
             fprintf(opening, "%s %s %s\n", n[i].name,n[i].surname,n[i].phone);
         }
     }

     fclose(opening);

     return 0;
 }

** Pointers in the C language

*** Changing a number

Assignment

    The following is a simple C program that prompts the user for an integer and stores it in the variable x. The program prints the number, calls the subroutine "change_number" passing the number as an argument, and finally prints the number again:

    #include<stdio.h>

    void change_number(int x);

    int main()
    {
      int x;
      printf("Enter the number x: ");
      scanf("%d", &x);
      printf("In the main program: x = %d\n", x);
      change_number(x);
      printf("In the main program: x = %d\n", x);
    }

    Your task is to write the subroutine "change_number" that takes an integer, increases it by three and prints the changed number as shown in the example printout. Pay attention to the value of the variable "x" in different parts of the program. In the following exercise, your subroutine will be supplemented with pointers.

Your answer

 void change_number(int x)
 {
     printf("In the subroutine: x = %i\n", x+3);
 }

*** Changing a number using a pointer

Assignment

    The C program introduced in the previous exercise has been changed. This time, the program prompts the user for an integer and stores it in the variable x. The program prints the number, calls the subroutine "change_number" passing the address of the variable x as an argument, and finally prints the value of the variable x again:

    #include<stdio.h>

    void change_number(int *x);

    int main()
    {
      int x;
      printf("Enter the number x: ");
      scanf("%d", &x);
      printf("In the main program: x = %d\n", x);
      change_number(&x);
      printf("In the main program: x = %d\n", x);
    }

    Your task is to write the subroutine "change_number" that takes the address of the variable x, increases the value of the variable by three and prints the changed number as shown in the example printout. As you can see in the example printout, the subroutine will permanently change the value of the variable x in the main program.

Your answer

 void change_number(int *x)
 {
     *x += 3;
     printf("In the subroutine: x = %i\n", *x);
 }

** Arrays and pointers

*** Returning a pointer from a function

Assignment

    Your task is to write a subroutine that takes a pointer to the first element of an integer array, as well as an integer variable. The arguments are passed to the subroutine in this order. The integer variable passed as an argument holds the number of elements in an array, while the actual array holds the number of integers specified by the variable.

    The subroutine must go through the table and return the address of the element holding the smallest value to the calling program. After receiving the address, the main program uses it to print the smallest number contained in the array.

    The prototype of the subroutine is the following:

    int *address_of_smallest_value(int *numbers, int size);

    In the above, the * operator indicates that the function's return value is a pointer.

Your answer

 int *address_of_smallest_value(int *numbers, int size)
 {
     int i;
     int *p;

     p = numbers;

     for(i = 0; i < size; i++){
         if( *p < *numbers )
             p = numbers;
         numbers++;
     }

     *p = 3;

     return p;

 }

*** Table processing and pointers

Assignment

    The C program below receives integers as command line arguments. After receiving the required values, the program calls the subroutine "calculate_and_print" which receives an array and its size passed by the main program, prints the numbers on the screen and prints their sum on the screen.

    #include <stdio.h>
    #include <stdlib.h>

    void calculate_and_print(int *, int);

    int main(int argc, char *argv[])
    {
      int x, sum=0, size=5, array[5];
      if(argc == 6){
      /* Program name and command line parameters */
        for(x=0;x<argc-1;x++){
         array[x] = atoi(argv[x+1]);
        }
        calculate_and_print(array, size);
      }else{
        printf("Incorrect number of command line arguments\n");
      }
      return 0;
    }

    Your task is to write the subroutine "calculate_and_print". The example printout shows how to print the numbers. The main program includes things that are outside the scope of this course, but you only need to write a subroutine that serves the main program.

Your answer

 void calculate_and_print(int *p, int size)
 {
     int i;
     int sum = 0;

     printf("Elements of the array:");

     for(i = 0; i < size; i++){
         printf("%i ", *p);
         sum += *p;
         p++;
     }

     printf("\nSum = %i\n", sum);

}
