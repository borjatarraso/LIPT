Read and write to and from files so that the information is shared between processes. Two processes both open the same file and both read and write from it, thus sharing the information. The problem is, sometimes it's a pain to do all those fseek()s and stuff to get around. Wouldn't it be easier if you could just map a section of the file to memory, and get a pointer to it? Then you could simply use pointer arithmetic to get (and set) data in the file.

Before mapping a file to memory, you need to get a file descriptor for it by using the open() system call:

 int fd;

 fd = open("mapdemofile", O_RDWR);

You can open it in whatever mode you want, but it has to match the mode specified in the prot parameter to the mmap() call (to memory map a file):

 void *mmap(void *addr, size_t len, int prot,
            int flags, int fildes, off_t off);

* addr: is the address we want the file mapped into. The best way to use this is to set it to (caddr_t)0 and let the OS choose it for you. If you tell it to use an address the OS doesn't like (for instance, if it's not a multiple of the virtual memory page size), it'll give you an error.
* len: is the length of the data we want to map into memory. If len not a multiple of the virtual memory page size, you will get a blocksize that is rounded up to that size. The extra bytes will be 0, and any changes you make to them will not modify the file.
* prot: allows you to specify what kind of access this process has to the memory mapped region. This can be a bitwise-ORd mixture of the following values: PROT_READ, PROT_WRITE, and PROT_EXEC, for read, write, and execute permissions, respectively. The value specified here must be equivalent to the mode specified in the open() system call that is used to get the file descriptor.
* flags: There are just miscellaneous flags that can be set for the system call. You'll want to set it to MAP_SHARED if you're planning to share your changes to the file with other processes, or MAP_PRIVATE otherwise. If you set it to the latter, your process will get a copy of the mapped region, so any changes you make to it will not be reflected in the original fileâ€”thus, other processes will not be able to see them.
* fildes: is where you put that file descriptor you opened earlier.
* off: is the offset in the file that you want to start mapping from. A restriction: this must be a multiple of the virtual memory page size. This page size can be obtained with a call to getpagesize().

mmap() returns -1 on error, and sets errno. Otherwise, it returns a pointer to the start of the mapped data.

First we'll open() it to get the file descriptor, then we'll use getpagesize() to get the size of a virtual memory page and use this value for both the len and the off. Then, we'll start mapping at the second page, and map for one page's length:

 #include <unistd.h>
 #include <sys/types.h>
 #include <sys/mman.h>

 int fd, pagesize;
 char *data;

 fd = open("foo", O_RDONLY);
 pagesize = getpagesize();
 data = mmap((caddr_t)0, pagesize, PROT_READ, MAP_SHARED, fd, pagesize);

After, you can access the first byte of the mapped section of file using data[0]. mmap() returns caddr_t, but we treat it as a char* (caddr_t usually is defined to be a char*).

Notice that we've mapped the file PROT_READ so we have read-only access. Any attempt to write to the data (data[0] = 'B', for example) will cause a segmentation violation. Open the file O_RDWR with prot set to PROT_READ|PROT_WRITE if you want read-write access to the data.

munmap() function to un-memory map a file:

 int munmap(caddr_t addr, size_t len);

Unmaps the region pointed to by addr (returned from mmap()) with length len (same as the len passed to mmap()). munmap() returns -1 on error and sets the errno variable. Once you've unmapped a file, any attempts to access the data through the old pointer will result in a segmentation fault.

If you have multiple processes manipulating the data in the same file concurrently, you could be in for troubles. You might have to lock the file or use semaphores to regulate access to the file while a process messes with it.

Full example that maps its own source to memory and prints the byte that's found at whatever offset you specify on the command line. The program restricts the offsets you can specify to the range 0 through the file length. The file length is obtained through a call to stat(). It returns a structure full of file info, one field of which is the size in bytes.

 #include <stdio.h>
 #include <stdlib.h>
 #include <fcntl.h>
 #include <unistd.h>
 #include <sys/types.h>
 #include <sys/mman.h>
 #include <sys/stat.h>
 #include <errno.h>

 int main(int argc, char *argv[])
 {
     int fd, offset;
     char *data;
     struct stat sbuf;

     if (argc != 2) {
         fprintf(stderr, "usage: mmapdemo offset\n");
         exit(1);
     }

     if ((fd = open("mmapdemo.c", O_RDONLY)) == -1) {
         perror("open");
         exit(1);
     }

     if (stat("mmapdemo.c", &sbuf) == -1) {
         perror("stat");
         exit(1);
     }

     offset = atoi(argv[1]);
     if (offset < 0 || offset > sbuf.st_size-1) {
         fprintf(stderr, "mmapdemo: offset must be in the range 0-%d\n", \
                                                               sbuf.st_size-1);
         exit(1);
     }

     data = mmap((caddr_t)0, sbuf.st_size, PROT_READ, MAP_SHARED, fd, 0)) \
                                                            == (caddr_t)(-1)) {
     if (data == (caddr_t)(-1)) {
         perror("mmap");
         exit(1);
     }

     printf("byte at offset %d is '%c'\n", offset, data[offset]);

     return 0;
 }

Run the program like this:

 $ '''mmapdemo 30'''
 byte at offset 30 is 'e'
