* synchronization

The threads library provides three synchronization mechanisms:

- mutexes: Mutual exclusion lock: Block access to variables by other threads. This enforces exclusive access by a thread to a variable or set of variables.
- joins: Make a thread wait till others are complete (terminated).
- condition variables: data type pthread_cond_t

** Mutexes

Mutexes are used to prevent data inconsistencies due to operations by multiple threads upon the same memory area performed at the same time or to prevent race conditions where an order of operation upon the memory is expected.

Mutexes can be applied only to threads in a single process and do not work between processes as do semaphores.

Example of threaded function without mutex:

 int counter=0;

 void functionC()
 {
    counter++;
 }

Example of threaded function with mutex:

 /* Note scope of variable and mutex are the same */
 pthread_mutex_t mutex1 = PTHREAD_MUTEX_INITIALIZER;
 int counter=0;

 void functionC()
 {
    pthread_mutex_lock( &mutex1 );
    counter++;
    pthread_mutex_unlock( &mutex1 );
 }

Functions to use lock and unlock:

- pthread_mutex_lock(): acquire a lock on the specified mutex variable. If the mutex is already locked by another thread, this call will block the calling thread until the mutex is unlocked.
- pthread_mutex_unlock(): unlock a mutex variable. An error is returned if mutex is already unlocked or owned by another thread.
- pthread_mutex_trylock(): attempt to lock a mutex or will return error code if busy. Useful for preventing deadlock conditions.

Full example with mutex:

 #include <stdio.h>
 #include <stdlib.h>
 #include <pthread.h>

 void *functionC();
 pthread_mutex_t mutex1 = PTHREAD_MUTEX_INITIALIZER;
 int  counter = 0;

 main()
 {
    int rc1, rc2;
    pthread_t thread1, thread2;

    /* Create independent threads each of which will execute functionC */

    if( (rc1=pthread_create( &thread1, NULL, &functionC, NULL)) )
    {
       printf("Thread creation failed: %d\n", rc1);
    }

    if( (rc2=pthread_create( &thread2, NULL, &functionC, NULL)) )
    {
       printf("Thread creation failed: %d\n", rc2);
    }

    /* Wait till threads are complete before main continues. Unless we  */
    /* wait we run the risk of executing an exit which will terminate   */
    /* the process and all threads before the threads have completed.   */

    pthread_join( thread1, NULL);
    pthread_join( thread2, NULL);

    exit(0);
 }

 void *functionC()
 {
    pthread_mutex_lock( &mutex1 );
    counter++;
    printf("Counter value: %d\n",counter);
    pthread_mutex_unlock( &mutex1 );
 }

When a mutex lock is attempted against a mutex which is held by another thread, the thread is blocked until the mutex is unlocked. When a thread terminates, the mutex does not unless explicitly unlocked.

** Joins

A join is performed when one wants to wait for a thread to finish. A thread calling routine may launch multiple threads then wait for them to finish to get the results. One waits for the completion of the threads with a join.

- pthread_create(): create a new thread.
- pthread_join(): wait for termination of another thread.
- pthread_self(): return identifier of current thread.

Example of threads using joins:

 #include <stdio.h>
 #include <pthread.h>

 #define NTHREADS 10
 void *thread_function(void *);
 pthread_mutex_t mutex1 = PTHREAD_MUTEX_INITIALIZER;
 int  counter = 0;

 main()
 {
    pthread_t thread_id[NTHREADS];
    int i, j;

    for(i=0; i < NTHREADS; i++)
    {
       pthread_create( &thread_id[i], NULL, thread_function, NULL );
    }

    for(j=0; j < NTHREADS; j++)
    {
       pthread_join( thread_id[j], NULL);
    }

    /* Now that all threads are complete I can print the final result.     */
    /* Without the join I could be printing a value before all the threads */
    /* have been completed.                                                */

    printf("Final counter value: %d\n", counter);
 }

 void *thread_function(void *dummyPtr)
 {
    printf("Thread number %ld\n", pthread_self());
    pthread_mutex_lock( &mutex1 );
    counter++;
    pthread_mutex_unlock( &mutex1 );
 }

** Condition Variables

A condition variable is a variable of type pthread_cond_t and is used with the appropriate functions for waiting and later, process continuation. The condition variable mechanism allows threads to suspend execution and relinquish the processor until some condition is true. A condition variable must always be associated with a mutex to avoid a race condition created by one thread preparing to wait and another thread which may signal the condition before the first thread actually waits on it resulting in a deadlock.  The thread will be perpetually waiting for a signal that is never sent. Any mutex can be used, there is no explicit link between the mutex and the condition variable.

Creating/Destroying threads:

- pthread_cond_init
- pthread_cond_t cond = PTHREAD_COND_INITIALIZER;
- pthread_cond_destroy

Waiting on condition:

- pthread_cond_wait: unlocks the mutex and waits for the condition variable cond to be signaled.
- pthread_cond_timedwait: place limit on how long it will block.

Waking thread based on condition:

- pthread_cond_signal: restarts one of the threads that are waiting on the condition variable cond.
- pthread_cond_broadcast: wake up all threads blocked by the specified condition variable.

Full example of threads using condition variables:

 #include <stdio.h>
 #include <stdlib.h>
 #include <pthread.h>

 pthread_mutex_t count_mutex     = PTHREAD_MUTEX_INITIALIZER;
 pthread_cond_t  condition_var   = PTHREAD_COND_INITIALIZER;

 void *functionCount1();
 void *functionCount2();
 int  count = 0;
 #define COUNT_DONE  10
 #define COUNT_HALT1  3
 #define COUNT_HALT2  6

 main()
 {
    pthread_t thread1, thread2;

    pthread_create( &thread1, NULL, &functionCount1, NULL);
    pthread_create( &thread2, NULL, &functionCount2, NULL);

    pthread_join( thread1, NULL);
    pthread_join( thread2, NULL);

    printf("Final count: %d\n",count);

    exit(0);
 }

 // Write numbers 1-3 and 8-10 as permitted by functionCount2()

 void *functionCount1()
 {
    for(;;)
    {
       // Lock mutex and then wait for signal to relase mutex
       pthread_mutex_lock( &count_mutex );

       // Wait while functionCount2() operates on count
       // mutex unlocked if condition varialbe in functionCount2() signaled.
       pthread_cond_wait( &condition_var, &count_mutex );
       count++;
       printf("Counter value functionCount1: %d\n",count);

       pthread_mutex_unlock( &count_mutex );

       if(count >= COUNT_DONE) return(NULL);
     }
 }

 // Write numbers 4-7

 void *functionCount2()
 {
     for(;;)
     {
        pthread_mutex_lock( &count_mutex );

        if( count < COUNT_HALT1 || count > COUNT_HALT2 )
        {
           // Condition of if statement has been met.
           // Signal to free waiting thread by freeing the mutex.
           // Note: functionCount1() is now permitted to modify "count".
           pthread_cond_signal( &condition_var );
        }
        else
        {
           count++;
           printf("Counter value functionCount2: %d\n",count);
        }

        pthread_mutex_unlock( &count_mutex );

        if(count >= COUNT_DONE) return(NULL);
     }

 }

functionCount1() was halted while count was between the values COUNT_HALT1 and COUNT_HALT2. The only thing that has been ensures is that functionCount2 will increment the count between the values COUNT_HALT1 and COUNT_HALT2. Everything else is random.

The logic conditions (the "if" and "while" statements) must be chosen to insure that the "signal" is executed if the "wait" is ever processed. Poor software logic can also lead to a deadlock condition.
