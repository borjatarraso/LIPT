* message queues

A message queue works kind of like a FIFO, but supports some additional functionality. There are ways to pull certain messages out of the queue before they reach the front. Process can create a new message queue, or it can connect to an existing one. The latter, way two processes can exchange information through the same message queue.

When you create a message queue, it doesn't go away until you destroy it. All the processes that have ever used it can quit, but the queue will still exist. Good practice is to use the ipcs command to check if any of your unused message queues are just floating around out there. You can destroy them with the ipcrm command.

First of all, you want to connect to a queue, or create it if it doesn't exist.

 int msgget(key_t key, int msgflg);

msgget() returns the message queue ID on success, or -1 on failure (and it sets errno, of course.)

- '''key''' is a system-wide unique identifier describing the queue you want to connect to (or create). Every other process that wants to connect to this queue will have to use the same key.
- '''msgflg''' tells msgget() what to do with queue in question.

Since the type key_t is actually just a long, you can use any number you want. but with ftok() function which generates a key from two arguments:

 key_t ftok(const char *path, int id);

- '''path''' just has to be a file that this process can read.
- '''id''' is usually just set to some arbitrary char, like 'A'.

The ftok() function uses information about the named file (like inode number, etc.) and the id to generate a probably-unique key for msgget(). Programs that want to use the same queue must generate the same key, so they must pass the same parameters to ftok().

 #include <sys/msg.h>

 key = ftok("/home/beej/somefile", 'b');
 msqid = msgget(key, 0666 | IPC_CREAT);

Sending to the queue; Each message is made up of two parts, which are defined in the template structure struct msgbuf, as defined in sys/msg.h:

 struct msgbuf {
     long mtype;
     char mtext[1];
 };

- '''mtype''' is used later when retrieving messages from the queue.
- '''mtext''' is the data this will be added to the queue.

You can use any structure you want to put messages on the queue, as long as the first element is a long.

 struct pirate_msgbuf {
     long mtype;  /* must be positive */
     struct pirate_info {
         char name[30];
         char ship_type;
         int notoriety;
         int cruelty;
         int booty_value;
     } info;
 };

Pass this information to a message queue, use msgsnd():

 int msgsnd(int msqid, const void *msgp,
            size_t msgsz, int msgflg);

- '''msqid''' is the message queue identifier returned by msgget().
- '''sgp''' is a pointer to the data you want to put on the queue.
- '''msgsz''' is the size in bytes of the data to add to the queue (not counting the size of the mtype member).
- '''msgflg''' allows you to set some optional flag parameters.

When to get the size of the data to send, just subtract the sizeof(long) (the mtype) from the sizeof() the whole message buffer structure:

 struct cheese_msgbuf {
     long mtype;
     char name[20];
     int type;
     float yumminess;
 };

 /* calculate the size of the data to send: */

 int size = sizeof(struct cheese_msgbuf) - sizeof(long);

(Or if the payload is a simple char[], you can use the length of the data as the message size.)

structures being added to the message queue:

 #include <sys/msg.h>
 #include <stddef.h>

 key_t key;
 int msqid;
 struct pirate_msgbuf pmb = {2, { "L'Olonais", 'S', 80, 10, 12035 } };

 key = ftok("/home/beej/somefile", 'b');
 msqid = msgget(key, 0666 | IPC_CREAT);

 /* stick him on the queue */
 msgsnd(msqid, &pmb, sizeof(struct pirate_msgbuf) - sizeof(long), 0);

Receiving from the queue, with msgrcv():

 #include <sys/msg.h>
 #include <stddef.h>

 key_t key;
 int msqid;
 struct pirate_msgbuf pmb; /* where L'Olonais is to be kept */

 key = ftok("/home/beej/somefile", 'b');
 msqid = msgget(key, 0666 | IPC_CREAT);

 /* get him off the queue! */
 msgrcv(msqid, &pmb, sizeof(struct pirate_msgbuf) - sizeof(long), 2, 0);

Prototype of msgrcv():

 int msgrcv(int msqid, void *msgp, size_t msgsz,
            long msgtyp, int msgflg);

msgtyp that is positive, negative, or zero:

 msgtyp 	Effect on msgrcv()
 Zero 	        Retrieve the next message on the queue, regardless of its mtype.
 Positive 	Get the next message with an mtype equal to the specified msgtyp.
 Negative 	Retrieve the first message on the queue whose mtype field is less than or equal to the absolute value of the msgtyp argument.

Destroying a message queue:

There are two ways:

- Use the Unix command ipcs to get a list of defined message queues, then use the command ipcrm to delete the queue.
- Write a program to do it for you.

Often, the latter choice is the most appropriate, since you might want your program to clean up the queue at some time or another. To do this requires the introduction of another function: msgctl().

 int msgctl(int msqid, int cmd,
            struct msqid_ds *buf);

- '''msqid''' is the queue identifier obtained from msgget().
- '''cmd''' which tells msgctl() how to behave.

It can be a variety of things. About IPC_RMID, which is used to remove the message queue. The buf argument can be set to NULL for the purposes of IPC_RMID.

 #include <sys/msg.h>
 ...
 msgctl(msqid, IPC_RMID, NULL);

Brace of programs that will communicate using message queues. This, adds messages to the message queue:

 #include <stdio.h>
 #include <stdlib.h>
 #include <errno.h>
 #include <string.h>
 #include <sys/types.h>
 #include <sys/ipc.h>
 #include <sys/msg.h>

 struct my_msgbuf {
     long mtype;
     char mtext[200];
 };

 int main(void)
 {
     struct my_msgbuf buf;
     int msqid;
     key_t key;

     if ((key = ftok("kirk.c", 'B')) == -1) {
         perror("ftok");
         exit(1);
     }

     if ((msqid = msgget(key, 0644 | IPC_CREAT)) == -1) {
         perror("msgget");
         exit(1);
     }

     printf("Enter lines of text, ^D to quit:\n");

     buf.mtype = 1; /* we don't really care in this case */

     while(fgets(buf.mtext, sizeof buf.mtext, stdin) != NULL) {
         int len = strlen(buf.mtext);

         /* ditch newline at end, if it exists */
         if (buf.mtext[len-1] == '\n') buf.mtext[len-1] = '\0';

         if (msgsnd(msqid, &buf, len+1, 0) == -1) /* +1 for '\0' */
             perror("msgsnd");
     }

     if (msgctl(msqid, IPC_RMID, NULL) == -1) {
         perror("msgctl");
         exit(1);
     }

     return 0;
 }

Retrieves messages from the queues:

 #include <stdio.h>
 #include <stdlib.h>
 #include <errno.h>
 #include <sys/types.h>
 #include <sys/ipc.h>
 #include <sys/msg.h>

 struct my_msgbuf {
     long mtype;
     char mtext[200];
 };

 int main(void)
 {
     struct my_msgbuf buf;
     int msqid;
     key_t key;

     if ((key = ftok("kirk.c", 'B')) == -1) {  /* same key as kirk.c */
         perror("ftok");
         exit(1);
     }

     if ((msqid = msgget(key, 0644)) == -1) { /* connect to the queue */
         perror("msgget");
         exit(1);
     }

     printf("spock: ready to receive messages, captain.\n");

     for(;;) { /* Spock never quits! */
         if (msgrcv(msqid, &buf, sizeof(buf.mtext), 0, 0) == -1) {
             perror("msgrcv");
             exit(1);
         }
         printf("spock: \"%s\"\n", buf.mtext);
     }

     return 0;
 }

Notice that receiving code, in the call to msgget(), doesn't include the IPC_CREAT option. We've left it up to queuing code to create the message queue, and receiving code will return an error if he hasn't done so.

Notice what happens when you're running both in separate windows and you kill one or the other. Also try running two copies of queueing code or two copies of receiving code to get an idea of what happens when you have two readers or two writers. Another interesting demonstration is to run queueing code, enter a bunch of messages, then run receiving code and see it retrieve all the messages in one swoop. Just messing around with these toy programs will help you gain an understanding of what is really going on.

Additional information:

- Check man page of msgctl().
- Man pages of msgsnd() and msgrcv().
