* shared memory

A segment of memory that is shared between processes. You just connect to the shared memory segment, and get a pointer to the memory. You can read and write to this pointer and all changes you make will be visible to everyone else connected to the segment.

A shared memory segment is created and connected to via the shmget() call:

 int shmget(key_t key, size_t size,
            int shmflg);

- shmget() returns an identifier for the shared memory segment.
- key: should be created the same was as shown in the Message Queues, using ftok().
- size: is the size in bytes of the shared memory segment.
- shmflg: permissions of the segment bitwise-ORd with IPC_CREAT if you want to create the segment, but can be 0 otherwise. (It doesn't hurt to specify IPC_CREAT every timeâ€”it will simply connect you if the segment already exists.)

Example call that creates a 1K segment with 644 permissions (rw-r--r--):

 key_t key;
 int shmid;

 key = ftok("/home/beej/somefile3", 'R');
 shmid = shmget(key, 1024, 0644 | IPC_CREAT);

Before you can use a shared memory segment, you have to attach yourself to it using the shmat() call (get a pointer to that data):

 void *shmat(int shmid, void *shmaddr, int shmflg);

- shmid: is the shared memory ID you got from the call to shmget().
- shmaddr: which you can use to tell shmat() which specific address to use but you should just set it to 0 and let the OS choose the address for you.
- shmflg: can be set to SHM_RDONLY if you only want to read from it, 0 otherwise.

Example of how to get a pointer to a shared memory segment:

 key_t key;
 int shmid;
 char *data;

 key = ftok("/home/beej/somefile3", 'R');
 shmid = shmget(key, 1024, 0644 | IPC_CREAT);
 data = shmat(shmid, (void *)0, 0);

Notice that shmat() returns a void pointer. shmat() returns -1 on failure. But how do you get -1 in a void pointer? Just do a cast during the comparison to check for errors:

 data = shmat(shmid, (void *)0, 0);
 if (data == (char *)(-1))
     perror("shmat");

All you have to do now is change the data it points to normal pointer-style.

Lets say you have the data pointer from the above example (char pointer) so we'll be reading and writing chars from it. For the sake of simplicity, lets say the 1K shared memory segment contains a null-terminated string.

We can print like this:

 printf("shared contents: %s\n", data);

We can store like this:

 printf("Enter a string: ");
 gets(data);

When you're done with the shared memory segment, your program should detach itself from it using the shmdt() call:

 int shmdt(void *shmaddr);

- shmaddr: is the address you got from shmat().

When you detach from the segment, it isn't destroyed. Nor is it removed when everyone detaches from it. You have to specifically destroy it using a call to shmctl():

 shmctl(shmid, IPC_RMID, NULL);

You can destroy the shared memory segment from the command line using the '''ipcrm''' Unix command. All the System V IPC objects you own can be viewed using the '''ipcs''' command.

Concurrent access is almost always a problem when you have multiple writers to a shared object. The way to get around this is to use Semaphores to lock the shared memory segment while a process is writing to it.

Full example of Shared memory (without using semaphores). If you run it with no command line parameters, it prints the contents of the shared memory segment. If you give it one command line parameter, it stores that parameter in the shared memory segment:

 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <sys/types.h>
 #include <sys/ipc.h>
 #include <sys/shm.h>

 #define SHM_SIZE 1024  /* make it a 1K shared memory segment */

 int main(int argc, char *argv[])
 {
     key_t key;
     int shmid;
     char *data;
     int mode;

     if (argc > 2) {
         fprintf(stderr, "usage: shmdemo [data_to_write]\n");
         exit(1);
     }

     /* make the key: */
     if ((key = ftok("shmdemo.c", 'R')) == -1) {
         perror("ftok");
         exit(1);
     }

     /* connect to (and possibly create) the segment: */
     if ((shmid = shmget(key, SHM_SIZE, 0644 | IPC_CREAT)) == -1) {
         perror("shmget");
         exit(1);
     }

     /* attach to the segment to get a pointer to it: */
     data = shmat(shmid, (void *)0, 0);
     if (data == (char *)(-1)) {
         perror("shmat");
         exit(1);
     }

     /* read or modify the segment, based on the command line: */
     if (argc == 2) {
         printf("writing to segment: \"%s\"\n", argv[1]);
         strncpy(data, argv[1], SHM_SIZE);
     } else
         printf("segment contains: \"%s\"\n", data);

     /* detach from the segment: */
     if (shmdt(data) == -1) {
         perror("shmdt");
         exit(1);
     }

     return 0;
 }
