* file locking

File locking provides a very simple yet incredibly useful mechanism for coordinating file accesses. There are two types of locking mechanisms: mandatory and advisory:

- Mandatory systems will actually prevent read()s and write()s to file.
- An advisory lock system, processes can still read and write from a file while it's locked. There is a way for a process to check for the existence of a lock before a read or write. See, it's a kind of cooperative locking system. Here we will refer only to Advisory lock system.

There are two types of (advisory!) locks:

- read locks (shared locks)
- write locks (exclusive locks)

The way read locks work is that they don't interfere with other read locks. When a process has an write lock on a file, no other process can activate either a read or write lock until it is relinquished. There can be multiple readers simultaneously, but there can only be one writer at a time.

There are many ways to lock files in Unix systems:

- System V likes lockf().
- flock() which offers better control over the lock, but still lacks in certain ways.
- fcntl()

Setting the lock consists of filling out a struct flock (declared in fcntl.h) that describes the type of lock needed.

 struct flock fl;
 int fd;

 fl.l_type   = F_WRLCK;  /* F_RDLCK, F_WRLCK, F_UNLCK    */
 fl.l_whence = SEEK_SET; /* SEEK_SET, SEEK_CUR, SEEK_END */
 fl.l_start  = 0;        /* Offset from l_whence         */
 fl.l_len    = 0;        /* length, 0 = to EOF           */
 fl.l_pid    = getpid(); /* our PID                      */

 fd = open("filename", O_WRONLY);

 fcntl(fd, F_SETLKW, &fl);  /* F_GETLK, F_SETLK, F_SETLKW */

struct flock since the fields in it are used to describe the locking action taking place.

 l_type 	This is where you signify the type of lock you want to set. It's either F_RDLCK, F_WRLCK, or F_UNLCK if you want to set a read lock, write lock, or clear the lock, respectively.
 l_whence 	This field determines where the l_start field starts from (it's like an offset for the offset). It can be either SEEK_SET, SEEK_CUR, or SEEK_END, for beginning of file, current file position, or end of file.
 l_start 	This is the starting offset in bytes of the lock, relative to l_whence.
 l_len 	        This is the length of the lock region in bytes (which starts from l_start which is relative to l_whence.
 l_pid  	The process ID of the process dealing with the lock. Use getpid() to get this.

We told it make a lock of type F_WRLCK (a write lock), starting relative to SEEK_SET (the beginning of the file), offset 0, length 0 (a zero value means "lock to end-of-file), with the PID set to getpid().

- The next step is to open() the file, since flock() needs a file descriptor of the file that's being locked.
- When you open the file, you need to open it in the same mode as you have specified in the lock.
- If you open the file in the wrong mode for a given lock type, fcntl() will return -1 and errno will be set to EBADF.

 l_type 	mode
 F_RDLCK 	O_RDONLY or O_RDWR
 F_WRLCK 	O_WRONLY or O_RDWR

* Finally, call to fcntl() actually sets, clears, or gets the lock. The second argument (the cmd) to fcntl() tells it what to do with the data passed to it in the struct flock.

 F_SETLKW 	This argument tells fcntl() to attempt to obtain the lock requested in the struct flock structure. If the lock cannot be obtained (since someone else has it locked already), fcntl() will wait (block) until the lock has cleared, then will set it itself. This is a very useful command. I use it all the time.
 F_SETLK 	This function is almost identical to F_SETLKW. The only difference is that this one will not wait if it cannot obtain a lock. It will return immediately with -1. This function can be used to clear a lock by setting the l_type field in the struct flock to F_UNLCK.
 F_GETLK 	If you want to only check to see if there is a lock, but don't want to set one, you can use this command. It looks through all the file locks until it finds one that conflicts with the lock you specified in the struct flock. It then copies the conflicting lock's information into the struct and returns it to you. If it can't find a conflicting lock, fcntl() returns the struct as you passed it, except it sets the l_type field to F_UNLCK.

To clear a lock:

 struct flock fl;
 int fd;

 fl.l_type   = F_WRLCK;  /* F_RDLCK, F_WRLCK, F_UNLCK    */
 fl.l_whence = SEEK_SET; /* SEEK_SET, SEEK_CUR, SEEK_END */
 fl.l_start  = 0;        /* Offset from l_whence         */
 fl.l_len    = 0;        /* length, 0 = to EOF           */
 fl.l_pid    = getpid(); /* our PID                      */

 fd = open("filename", O_WRONLY);  /* get the file descriptor */
 fcntl(fd, F_SETLKW, &fl);  /* set the lock, waiting if necessary */
 ...
 fl.l_type   = F_UNLCK;  /* tell it to unlock the region */
 fcntl(fd, F_SETLK, &fl); /* set the region to unlocked */

Possible to use the same check of code but using F_SETLK in the penultimate line.

Waits for the user to hit return, then locks its own source, waits for another return, then unlocks it. By running this program in two (or more) windows, you can see how programs interact while waiting for locks.

 #include <stdio.h>
 #include <stdlib.h>
 #include <errno.h>
 #include <fcntl.h>
 #include <unistd.h>

 int main(int argc, char *argv[])
 {
                     /* l_type   l_whence  l_start  l_len  l_pid   */
     struct flock fl = {F_WRLCK, SEEK_SET,   0,      0,     0 };
     int fd;

     fl.l_pid = getpid();

     if (argc > 1)
         fl.l_type = F_RDLCK;

     if ((fd = open("lockdemo.c", O_RDWR)) == -1) {
         perror("open");
         exit(1);
     }

     printf("Press <RETURN> to try to get lock: ");
     getchar();
     printf("Trying to get lock...");

     if (fcntl(fd, F_SETLKW, &fl) == -1) {
         perror("fcntl");
         exit(1);
     }

     printf("got lock\n");
     printf("Press <RETURN> to release lock: ");
     getchar();

     fl.l_type = F_UNLCK;  /* set to unlock same region */

     if (fcntl(fd, F_SETLK, &fl) == -1) {
         perror("fcntl");
         exit(1);
     }

     printf("Unlocked.\n");

     close(fd);

     return 0;
 }

There isn't a rule anywhere that keeps you from adding more read locks if there is a process waiting for a write lock. You must be careful. Using write locks to guarantee exclusive access to a file for a short amount of time while it's being updated;
