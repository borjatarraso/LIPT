* fifos

Sometimes known as a named pipe. The name is that of a file that multiple processes can open() and read and write to.

If I run two individual copies of a program, they can both call pipe() all they want and still not be able to speak to one another. (This is because you must pipe(), then fork() to get a child process that can communicate to the parent via the pipe.) With FIFOs, though, each unrelated process can simply open() the pipe and transfer data through it.

FIFO is actually a file on disk, so you need to create:

 mknod("myfifo", S_IFIFO | 0644 , 0); // arguments: fifo_name, creation mode, permissions, device number (ignored always when created a fifo).

- Once the FIFO has been created, a process can start up and open it for reading or writing using the standard open() system call.

Two programs which will send data through a FIFO. One is speak.c which sends data through the FIFO, and the other is called tick.c, as it sucks data out of the FIFO:

 // file speak.c
 #include <stdio.h>
 #include <stdlib.h>
 #include <errno.h>
 #include <string.h>
 #include <fcntl.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <unistd.h>

 #define FIFO_NAME "american_maid"

 int main(void)
 {
     char s[300];
     int num, fd;

     mknod(FIFO_NAME, S_IFIFO | 0666, 0);

     printf("waiting for readers...\n");
     fd = open(FIFO_NAME, O_WRONLY);
     printf("got a reader--type some stuff\n");

     while (gets(s), !feof(stdin)) {
         if ((num = write(fd, s, strlen(s))) == -1)
             perror("write");
         else
             printf("speak: wrote %d bytes\n", num);
     }

     return 0;
 }

What speak does is create the FIFO, then try to open() it. Now, what will happen is that the open() call will block until some other process opens the other end of the pipe for reading.

 // file tick.c
 #include <stdio.h>
 #include <stdlib.h>
 #include <errno.h>
 #include <string.h>
 #include <fcntl.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <unistd.h>

 #define FIFO_NAME "american_maid"

 int main(void)
 {
     char s[300];
     int num, fd;

     mknod(FIFO_NAME, S_IFIFO | 0666, 0);

     printf("waiting for writers...\n");
     fd = open(FIFO_NAME, O_RDONLY);
     printf("got a writer\n");

     do {
         if ((num = read(fd, s, 300)) == -1)
             perror("read");
         else {
             s[num] = '\0';
             printf("tick: read %d bytes: \"%s\"\n", num, s);
         }
     } while (num > 0);

     return 0;
 }

Tick will block on the open() if there is no one writing to the FIFO. As soon as someone opens the FIFO for writing, tick will spring to life.

"Broken Pipe"! What does this mean? Well, what has happened is that when all readers for a FIFO close and the writer is still open, the writer will receiver the signal SIGPIPE the next time it tries to write(). The default signal handler for this signal prints "Broken Pipe" and exits. Of course, you can handle this more gracefully by catching SIGPIPE through the signal() call.

What happens if you have multiple readers? Well, strange things happen. Sometimes one of the readers get everything. Sometimes it alternates between readers. Why do you want to have multiple readers, anyway?

 fd = open(FIFO_NAME, O_RDONLY | O_NDELAY);

This will cause open() to return -1 if there are no processes that have the file open for reading.

You can open the reader process using the O_NDELAY flag, but this has a different effect: all attempts to read() from the pipe will simply return 0 bytes read if there is no data in the pipe.
